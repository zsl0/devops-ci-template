## 应用发布

## 使用docker发布
.deploy_docker:
  stage: deploy
  script:
    - if [ $(docker ps -a | grep ${CONTAINER_NAME} | wc -l) -ge 1 ]; then docker rm -f ${CONTAINER_NAME}; echo '删除正在运行的容器 ${CONTAINER_NAME};'; fi
    # 根据模版修改jar服务Dockerfile
    - scp ./Dockerfile_template ./${DOCKERFILE_NAME}
    - sed -i "s#MODULE_PATH#${MODULE_PATH}#g" ./${DOCKERFILE_NAME}
    - sed -i "s#JAR_NAME#${JAR_NAME}#g" ./${DOCKERFILE_NAME}
    - echo "输出格式化后的Dockerfile名称：${DOCKERFILE_NAME}" && cat ./${DOCKERFILE_NAME}
    # 运行docker容器
    - docker build -t ${IMAGE_NAME}:${IMAGE_TAG} -f ./${DOCKERFILE_NAME} .
    - docker run ${DOCKER_OPT} -d ${IMAGE_NAME}:${IMAGE_TAG}
    - echo "docker 容器 '${CONTAINER_NAME}' 运行完成!"
  variables:
    # 镜像名称，默认使用服务名
    IMAGE_NAME: "gateway"
    # 模块路径
    MODULE_PATH: "data-center/gateway/"
    # jar包名称
    JAR_NAME: "gateway.jar"

    # 格式化后的Dockerfile名称
    DOCKERFILE_NAME: Dockerfile_${IMAGE_NAME}
    # 镜像版本，默认使用分支名称
    IMAGE_TAG: "${CI_COMMIT_REF_NAME}"
    # 容器别名，默认使用服务名+分支名
    CONTAINER_NAME: "${IMAGE_NAME}_${CI_COMMIT_REF_NAME}"
    # docker额外选项参数
    DOCKER_OPT: "--name ${CONTAINER_NAME}"
  rules:
    - if: $RUN_DEPLOY_DOCKER == 'no'
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^RELEASE-*/ || $CI_COMMIT_REF_NAME =~ /master/ || $CI_COMMIT_TAG
      when: manual
    - if: $CI_COMMIT_REF_NAME =~ /develop/
      when: on_success
    - when: never



## 使用kubectl镜像发布
.deploy_k8s:
  stage: deploy
  script:
    - echo $KUBE_TOKEN
    - kubectl config set-cluster my-cluster --server=${KUBE_URL} --certificate-authority="${KUBE_CA_PEM_FILE}"
    - kubectl config set-credentials admin --token=${KUBE_TOKEN}
    - ls -a 
    - sed -i "s#__namespace__#${NAMESPACE}#g" ${DEPLOY_FILE}
    - sed -i "s#__appname__#${APP_NAME}#g" ${DEPLOY_FILE}
    - sed -i "s#__containerport__#${CONTAINER_PORT}#g" ${DEPLOY_FILE} 
    - sed -i "s#__nodeport__#${NODE_PORT}#g" ${DEPLOY_FILE} 
    - sed -i "s#__imagename__#${IMAGE_NAME}#g" ${DEPLOY_FILE} 
    - sed -i "s#__CI_ENVIRONMENT_SLUG__#${CI_ENVIRONMENT_SLUG}#g" ${DEPLOY_FILE}
    - sed -i "s#__CI_PROJECT_PATH_SLUG__#${CI_PROJECT_PATH_SLUG}#g" ${DEPLOY_FILE}
    - sed -i "s#__ingressdomain__#${ENV_URL}#g" ${DEPLOY_FILE}
    - cat ${DEPLOY_FILE}
    - "kubectl create secret docker-registry ${APP_NAME} \
            --docker-server=${CI_REGISTRY} \
            --docker-username=$CI_REGISTRY_USER \
            --docker-password=${CI_REGISTRY_PASSWD} \
            --docker-email=test@test.com -n ${NAMESPACE} || echo 'secrets already exists'"
    - kubectl apply -f ${DEPLOY_FILE}
  rules:
    - if: " $RUN_DEPLOY_K8S == 'no'"
      when: never
    - when: manual
  environment:
    name: "${ENV_NAME}"
    url: "http://${ENV_NAME}.${CI_PROJECT_NAMESPACE}.${CI_PROJECT_NAME}.devops.com"

  


## 回滚
.rollout_k8s:
  stage: deploy
  script:
    - rm -rf $HOME/.kube
    - kubectl config set-cluster my-cluster --server=${KUBE_URL} --certificate-authority="${KUBE_CA_PEM_FILE}"
    - kubectl config set-credentials admin --token=${KUBE_TOKEN}
    - kubectl rollout history deployment ${APP_NAME} -n ${NAMESPACE}
    - kubectl rollout undo deployment ${APP_NAME} -n ${NAMESPACE}
  rules:
    - if: " $RUN_DEPLOY_K8S == 'no' "
      when: never
    - when: manual
  environment:
    name: "${ENV_NAME}"
    action: stop
